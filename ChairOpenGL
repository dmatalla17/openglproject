// GLEW header
#include <GL/glew.h>
#include <stdio.h>
#include <stdlib.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <GL/freeglut.h>
// GLM header files
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#define GLM_ENABLE_EXPERIMENTAL
#include <glm/gtx/transform2.hpp>
#include <glm/gtc/matrix_access.hpp>
#include <glm/gtx/projection.hpp>
#include <glm/gtc/matrix_inverse.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <SOIL/SOIL.h>

#include <iostream>
using namespace std;
using namespace glm;
#define BUFFER_OFFSET(offset) ((GLvoid *) offset)
 
GLfloat chairVertices[][4] = {
{ 2.0f, -0.2f, -2.0f,3.0f}, // 1
{ 2.0f, 0.2f, -2.0f,3.0f},
{ 2.0f, 0.2f, 2.0f,3.0f},
{ 2.0f, -0.2f, 2.0f,3.0f},
{-2.0f, -0.2f, 2.0f,3.0f}, // 2
{ 2.0f, -0.2f, 2.0f,3.0f},
{ 2.0f, 0.2f, 2.0f,3.0f},
{ -2.0f, 0.2f, 2.0f,3.0f},
{-2.0f, -0.2f, -2.0f,3.0f}, // 3
{ -2.0f, -0.2f, 2.0f,3.0f},
{ -2.0f, 0.2f, 2.0f,3.0f},
{ -2.0f, 0.2f, -2.0f,3.0f},
{-2.0f, -0.2f, -2.0f,3.0f},//4
{-2.0f, 0.2f, -2.0f,3.0f},
{2.0f, 0.2f, -2.0f,3.0f},
{2.0f, -0.2f, -2.0f,3.0f},
{2.0f, 0.2f, 2.0f,3.0f},//5
{-2.0f, 0.2f, 2.0f,3.0f},
{-2.0f, 0.2f, -2.0f,3.0f},
{2.0f, 0.2f, -2.0f,3.0f},
{2.0f, -0.2f, 2.0f,3.0f},//6
{-2.0f, -0.2f, 2.0f,3.0f},
{-2.0f, -0.2f, -2.0f,3.0f},
{2.0f, -0.2f, -2.0f,3.0f},
//chair front leg
{2.0f,-0.2f,2.0f,3.0f},//7
{1.6f, -0.2f, 2.0f,3.0f},
{1.6f, -3.0f, 2.0f,3.0f},
{2.0f, -3.0f, 2.0f,3.0f},
//back
{2.0f,-0.2f,1.6f,3.0f},//8
{1.6f, -0.2f, 1.6f,3.0f},
{1.6f, -3.0f, 1.6f,3.0f},
{2.0f, -3.0f, 1.6f,3.0f},
//right
{2.0f,-0.2f,2.0f,3.0f},//9
{2.0f, -0.2f, 1.6f,3.0f},
{2.0f, -3.0f, 1.6f,3.0f},
{2.0f, -3.0f, 2.0f,3.0f},
//left
{1.6f,-0.2f,2.0f,3.0f},//10
{1.6f, -0.2f, 1.6f,3.0f},
{1.6f, -3.0f, 1.6f,3.0f},
{1.6f, -3.0f, 2.0f,3.0f},
//chair leg back
//front
{2.0f,-0.2f,-1.6f,3.0f},//11
{1.6f, -0.2f, -1.6f,3.0f},
{1.6f, -3.0f, -1.6f,3.0f},
{2.0f, -3.0f, -1.6f,3.0f},
//back
{2.0f,-0.2f,-2.0f,3.0f},//12
{1.6f, -0.2f, -2.0f,3.0f},
{1.6f, -3.0f, -2.0f,3.0f},
{2.0f, -3.0f, -2.0f,3.0f},
//right
{2.0f,-0.2f,-2.0f,3.0f},//13
{2.0f, -0.2f, -1.6f,3.0f},
{2.0f, -3.0f, -1.6f,3.0f},
{2.0f, -3.0f, -2.0f,3.0f},
//left
{1.6f,-0.2f,-2.0f,3.0f},//14
{1.6f, -0.2f, -1.6f,3.0f},
{1.6f, -3.0f, -1.6f,3.0f},
{1.6f, -3.0f, -2.0f,3.0f},
//leg left front
{-2.0f,-0.2f,2.0f,3.0f},//15
{-1.6f, -0.2f, 2.0f,3.0f},
{-1.6f, -3.0f, 2.0f,3.0f},
{-2.0f, -3.0f, 2.0f,3.0f},
//back
{-2.0f,-0.2f,1.6f,3.0f},//16
{-1.6f, -0.2f, 1.6f,3.0f},
{-1.6f, -3.0f, 1.6f,3.0f},
{-2.0f, -3.0f, 1.6f,3.0f},
//right
{-2.0f,-0.2f,2.0f,3.0f},//17
{-2.0f, -0.2f, 1.6f,3.0f},
{-2.0f, -3.0f, 1.6f,3.0f},
{-2.0f, -3.0f, 2.0f,3.0f},
//left
{-1.6f,-0.2f,2.0f,3.0f},//18
{-1.6f, -0.2f, 1.6f,3.0f},
{-1.6f, -3.0f, 1.6f,3.0f},
{-1.6f, -3.0f, 2.0f,3.0f},
//chair left leg back front
//front
{-2.0f,-0.2f,-1.6f,3.0f},//19
{-1.6f, -0.2f, -1.6f,3.0f},
{-1.6f, -3.0f, -1.6f,3.0f},
{-2.0f, -3.0f, -1.6f,3.0f},
//back
{-2.0f,-0.2f,-2.0f,3.0f},//20
{-1.6f, -0.2f, -2.0f,3.0f},
{-1.6f, -3.0f, -2.0f,3.0f},
{-2.0f, -3.0f, -2.0f,3.0f},
//right
{-2.0f,-0.2f,-2.0f,3.0f},//21
{-2.0f, -0.2f, -1.6f,3.0f},
{-2.0f, -3.0f, -1.6f,3.0f},
{-2.0f, -3.0f, -2.0f,3.0f},
//left
{-1.6f,-0.2f,-2.0f,3.0f},//22
{-1.6f, -0.2f, -1.6f,3.0f},
{-1.6f, -3.0f, -1.6f,3.0f},
{-1.6f, -3.0f, -2.0f,3.0f},
//chair back
//front
{-2.0f,-0.2f,-1.6f,3.0f},//23
{-1.6f, -0.2f, -1.6f,3.0f},
{-1.6f, 4.5f, -1.6f,3.0f},
{-2.0f, 4.5f, -1.6f,3.0f},
//back
{-2.0f,-0.2f,-2.0f,3.0f},//24
{-1.6f, -0.2f, -2.0f,3.0f},
{-1.6f, 4.5f, -2.0f,3.0f},
{-2.0f, 4.5f, -2.0f,3.0f},
//right
{-2.0f,-0.2f,-2.0f,3.0f},//25
{-2.0f, -0.2f, -1.6f,3.0f},
{-2.0f, 4.5f, -1.6f,3.0f},
{-2.0f, 4.5f, -2.0f,3.0f},
//left
{-1.6f,-0.2f,-2.0f,3.0f},//26
{-1.6f, -0.2f, -1.6f,3.0f},
{-1.6f, 4.5f, -1.6f,3.0f},
{-1.6f, 4.5f, -2.0f,3.0f},
//back chair
//front
{2.0f,-0.2f,-1.6f,3.0f},//27
{1.6f, -0.2f, -1.6f,3.0f},
{1.6f, 4.5f, -1.6f,3.0f},
{2.0f, 4.5f, -1.6f,3.0f},
//back
{2.0f,-0.2f,-2.0f,3.0f},//28
{1.6f, -0.2f, -2.0f,3.0f},
{1.6f, 4.5f, -2.0f,3.0f},
{2.0f, 4.5f, -2.0f,3.0f},
//right
{2.0f,-0.2f,-2.0f,3.0f},//29
{2.0f, -0.2f, -1.6f,3.0f},
{2.0f, 4.5f, -1.6f,3.0f},
{2.0f, 4.5f, -2.0f,3.0f},
//left
{1.6f,-0.2f,-2.0f,3.0f},//30
{1.6f, -0.2f, -1.6f,3.0f},
{1.6f, 4.5f, -1.6f,3.0f},
{1.6f, 4.5f, -2.0f,3.0f},
//back chair up
//front
{-2.0f, 4.0f, -2.0f,3.0f},//31
{2.0f, 4.0f, -2.0f,3.0f},
{2.0f, 4.5f, -2.0f,3.0f},
{-2.0f, 4.5f, -2.0f,3.0f},
//back
{-2.0f, 4.0f, -2.0f,3.0f},//32
{2.0f, 4.0f, -2.0f,3.0f},
{2.0f, 4.f, -2.0f,3.0f},
{-2.0f, 4.5f, -2.0f,3.0f},
{-2.0f, 4.0f, -2.0f,3.0f},//33
{-2.0f, 4.5f, -2.0f,3.0f},
{-2.0f, 4.5f, -1.8f,3.0f},
{-2.0f, 4.0f, -1.8f,3.0f},
{2.0f, 4.0f, -2.0f,3.0f},//34
{2.0f, 4.5f, -2.0f,3.0f},
{2.0f, 4.5f, -1.8f,3.0f},
{2.0f, 4.0f, -2.0f,3.0f},
{-2.0f, 4.5f, -2.0f,3.0f},//35
{-2.0f, 4.5f, -2.0f,3.0f},
{2.0f, 4.5f, -2.0f,3.0f},
{2.0f, 4.5f, -2.0f,3.0f},
//back chair down
//front
{-2.0f, 3.0f, -2.0f,3.0f},//36
{2.0f, 3.0f, -2.0f,3.0f},
{2.0f, 3.5f, -2.0f,3.0f},
{-2.0f, 3.5f, -2.0f,3.0f},
//back
{-1.8f, 3.0f, -2.0f,3.0f},//37
{1.8f, 3.0f, -2.0f,3.0f},
{1.8f, 3.0f, -2.0f,3.0f},
{-1.8f, 3.5f, -2.0f,3.0f},
{-1.8f, 3.0f, -2.0f,3.0f},//38
{-1.8f, 3.5f, -2.0f,3.0f},
{-1.8f, 3.5f, -1.8f,3.0f},
{-1.8f, 3.0f, -1.8f,3.0f},
{1.8f, 3.0f, -2.0f,3.0f},//39
{1.8f, 3.5f, -2.0f,3.0f},
{1.8f, 3.5f, -1.8f,3.0f},
{1.8f, 3.0f, -1.8f,3.0f},
{-1.8f, 3.5f, -2.0f,3.0f},//40
{-1.8f, 3.5f, -1.8f,3.0f},
{1.8f, 3.5f, -1.8f,3.0f},
{1.8f, 3.5f, -2.0f,3.0f},
};
int numVertices = 160;
GLfloat chairNormals[][4] = {
{1.0f, 0.0f, 0.0f,3.0f}, // 1
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 2
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 3
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 4
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 5
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 6
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 7
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 8
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 9
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 10
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 11
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 12
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 13
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 14
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 15
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 16
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 17
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 18
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 19
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 20
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 21
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 22
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 3
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 4
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 5
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 6
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 7
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 8
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 9
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 10
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 11
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 12
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 13
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 14
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 15
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 16
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 17
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 18
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 19
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{1.0f, 0.0f, 0.0f,3.0f}, // 20
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
{ 1.0f, 0.0f, 0.0f,3.0f},
};
GLfloat chairTextureCoords[][2] = {
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
{0.0f, 0.0f},
{1.0f, 0.0f},
{1.0f, 1.0f},
{0.0f, 1.0f},
};
// Update the texture image file path
const char *imageFileName = "oak.jpg";
// VBO buffer IDs
GLuint vertexArrayBufferID = 0;
GLuint normalArrayBufferID = 0;
GLuint texCoordArrayBufferID = 0;
GLuint program; // shader program ID
// Shader variable IDs
GLint vPos; // vertex position
GLint normalID; // vertex normal
GLint textureCoordID; // vertex texture coordinates
GLint mvpMatrixID; // projection matrix
GLint modelMatrixID; // view matrix
GLint normalMatrixID; // normal matrix for transforming normals
GLint lightSourcePositionID; // uniform for lighting
GLint diffuseLightProductID; // uniform for lighting
GLint ambientID;
GLint attenuationAID;
GLint attenuationBID;
GLint attenuationCID;
GLint textureSamplerID; // texture
// Texture ID
GLuint textureID;
// Texture unit ID
GLenum textureUnitID = GL_TEXTURE1;
GLuint textureSamplerValue = 1;
// Transformation matrices
mat4 projMatrix;
mat4 mvpMatrix;
mat4 modelMatrix;
mat4 viewMatrix;
mat3 normalMatrix;
// Light parameters
vec4 lightSourcePosition = vec4(0.0f, 4.0f, 0.0f, 1.0f);
vec4 diffuseMaterial = vec4(0.5f, 0.5f, 0.5f, 1.0f);
vec4 diffuseLightIntensity = vec4(1.0f, 1.0f, 1.0f, 1.0f);
vec4 ambient = vec4(0.2f, 0.2f, 0.2f, 1.0f);
float attenuationA = 1.0f;
float attenuationB = 0.2f;
float attenuationC = 0.0f;
vec4 diffuseLightProduct;
// Camera
vec3 eyePosition = vec3(0.0f, 0.0f, 4.0f);
vec3 lookAtCenter = vec3(0.0f, 0.0f, 0.0f);
vec3 upVector = vec3(0.0f, 1.0f, 0.0f);
float fieldOfView = 45.0f;
float nearPlane = 0.1f;
float farPlane = 1000.0f;
// Mouse rotation angles
float rotateX = 0;
float rotateY = 0;
float rotateZ = 0;
// Initialize vertex arrays and VBOs
void prepareVBOs() {
// Define a 3D chair
glGenBuffers(1, &vertexArrayBufferID);
glBindBuffer(GL_ARRAY_BUFFER, vertexArrayBufferID);
glBufferData(GL_ARRAY_BUFFER, sizeof(chairVertices), chairVertices, GL_STATIC_DRAW);
glGenBuffers(1, &normalArrayBufferID);
glBindBuffer(GL_ARRAY_BUFFER, normalArrayBufferID);
glBufferData(GL_ARRAY_BUFFER, sizeof(chairNormals), chairNormals, GL_STATIC_DRAW);
glGenBuffers(1, &texCoordArrayBufferID);
glBindBuffer(GL_ARRAY_BUFFER, texCoordArrayBufferID);
glBufferData(GL_ARRAY_BUFFER, sizeof(chairTextureCoords), chairTextureCoords, GL_STATIC_DRAW);
}
void prepareShaders() {
// Vertex shader source code
const char* vSource = {
"#version 130\n"
"in vec4 vPos;"
"in vec4 normal;"
"in vec2 vTextureCoord;"
"uniform mat4 mvpMatrix;"
"uniform mat4 modelMatrix;"
"uniform mat3 normalMatrix;"
"out vec4 transformedPosition;"
"out vec3 transformedNormal;"
"out vec2 textureCoord;"
"void main() {"
"gl_Position = mvpMatrix * vPos;"
// Transform the vertex position to the world space
"transformedPosition = modelMatrix * vPos;"
"transformedNormal = normalize(normalMatrix * normal.xyz);"
"textureCoord = vec2(vTextureCoord.x, vTextureCoord.y);"
"}"
};
// Fragment shader source code
// A point light source is added
const char* fSource = {
"#version 130\n"
"in vec4 transformedPosition;"
"in vec3 transformedNormal;"
"in vec2 textureCoord;"
"uniform vec4 lightSourcePosition;"
"uniform vec4 diffuseLightProduct;"
"uniform vec4 ambient;"
"uniform float attenuationA;"
"uniform float attenuationB;"
"uniform float attenuationC;"
"uniform sampler2D tex;"
"out vec4 fragColor;"
"void main() {"
// Light direction
"vec3 lightVector = normalize(transformedPosition.xyz - lightSourcePosition.xyz);"
// Distance between the light source and vertex
"float dist = distance(lightSourcePosition.xyz, transformedPosition.xyz);"
// Attenuation factor for light
"float attenuation = 1.0f / (attenuationA + (attenuationB * dist) + (attenuationC * dist * dist));"
"vec4 diffuse = attenuation * (max(dot(transformedNormal, lightVector), 0.0) * diffuseLightProduct);"
"vec4 textureColor = texture(tex, textureCoord);"
// Combine both lightening components
"fragColor = mix((ambient + diffuse), textureColor, 0.6f);"
"}"
};
// Declare shader
GLuint vShader, fShader;
// Create empty shader objects
vShader = glCreateShader(GL_VERTEX_SHADER);
fShader = glCreateShader(GL_FRAGMENT_SHADER);
glShaderSource(vShader, 1, &vSource, NULL);
glShaderSource(fShader, 1, &fSource, NULL);
// Compile shader objects
glCompileShader(vShader);
glCompileShader(fShader);
program = glCreateProgram();
glAttachShader(program, vShader);
glAttachShader(program, fShader);
// Link the shader program
glLinkProgram(program);
}
// Retrieve the ID of the shader variables
void getShaderVariableLocations(GLuint shaderProgram) {
vPos = glGetAttribLocation(shaderProgram, "vPos");
normalID = glGetAttribLocation(shaderProgram, "normal");
textureCoordID = glGetAttribLocation(shaderProgram, "vTextureCoord");
mvpMatrixID = glGetUniformLocation(shaderProgram, "mvpMatrix");
modelMatrixID = glGetUniformLocation(shaderProgram, "modelMatrix");
normalMatrixID = glGetUniformLocation(shaderProgram, "normalMatrix");
lightSourcePositionID = glGetUniformLocation(shaderProgram, "lightSourcePosition");
diffuseLightProductID = glGetUniformLocation(shaderProgram, "diffuseLightProduct");
ambientID = glGetUniformLocation(shaderProgram, "ambient");
attenuationAID = glGetUniformLocation(shaderProgram, "attenuationA");
attenuationBID = glGetUniformLocation(shaderProgram, "attenuationB");
attenuationCID = glGetUniformLocation(shaderProgram, "attenuationC");
textureSamplerID = glGetUniformLocation(shaderProgram, "tex");
}

void setShaderVariables() {
glUniformMatrix4fv(mvpMatrixID, 1, GL_FALSE, value_ptr(mvpMatrix));
glUniformMatrix4fv(modelMatrixID, 1, GL_FALSE, value_ptr(modelMatrix));
glUniformMatrix3fv(normalMatrixID, 1, GL_FALSE, value_ptr(normalMatrix));
glUniform4fv(lightSourcePositionID, 1, value_ptr(lightSourcePosition));
glUniform4fv(diffuseLightProductID, 1, value_ptr(diffuseLightProduct));
glUniform4fv(ambientID, 1, value_ptr(ambient));
glUniform1f(attenuationAID, attenuationA);
glUniform1f(attenuationBID, attenuationB);
glUniform1f(attenuationCID, attenuationC);
glUniform1i(textureSamplerID, textureSamplerValue);
}

// Set lighting related parameters
void setLightingParam() {
diffuseLightProduct = diffuseMaterial * diffuseLightIntensity;
}

void prepareTextureImage() {
// To load a picture
textureID = SOIL_load_OGL_texture(imageFileName,
SOIL_LOAD_AUTO, SOIL_CREATE_NEW_ID, SOIL_FLAG_INVERT_Y);
// Current active texture unit number.
glActiveTexture(textureUnitID);
glBindTexture(GL_TEXTURE_2D, textureID);
}

// Build the model matrix
mat4 buildModelMatrix() {
mat4 rotationXMatrix = rotate(mat4(3.0f), radians(rotateX), vec3(3.0f, 0.0f, 0.0f));
mat4 rotationYMatrix = rotate(mat4(3.0f), radians(rotateY), vec3(0.0f, 3.0f, 0.0f));
mat4 rotationZMatrix = rotate(mat4(3.0f), radians(rotateZ), vec3(0.0f, 0.0f, 3.0f));
mat4 matrix = rotationZMatrix * rotationYMatrix * rotationXMatrix;
return matrix;
}

void buildMatrices() {
modelMatrix = buildModelMatrix();
mvpMatrix = projMatrix * viewMatrix * modelMatrix;
normalMatrix = column(normalMatrix, 0, vec3(modelMatrix[0][0], modelMatrix[0][1], modelMatrix[0][2]));
normalMatrix = column(normalMatrix, 1, vec3(modelMatrix[1][0], modelMatrix[1][1], modelMatrix[1][2]));
normalMatrix = column(normalMatrix, 2, vec3(modelMatrix[2][0], modelMatrix[2][1], modelMatrix[2][2]));
// Create a matrix, used to transform vectors
normalMatrix = inverseTranspose(normalMatrix);
}

// Handles the display
void display()
{
// Clear the window with the background color
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
buildMatrices();
setShaderVariables();
// Activate the shader program
glUseProgram(program);
glTranslatef(1.0, 0.0, 0.0);
// If buffer object already exists make that buffer the current active one
glBindBuffer(GL_ARRAY_BUFFER, vertexArrayBufferID);
glVertexAttribPointer(vPos, 4, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));
// Enable the vertex attribute: position
glEnableVertexAttribArray(vPos);
glBindBuffer(GL_ARRAY_BUFFER, normalArrayBufferID);
glVertexAttribPointer(normalID, 4, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));
glEnableVertexAttribArray(normalID);
glBindBuffer(GL_ARRAY_BUFFER, texCoordArrayBufferID);
glVertexAttribPointer(textureCoordID, 2, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));
glEnableVertexAttribArray(textureCoordID);
// Start the shader program
glDrawArrays(GL_QUADS, 0, numVertices);
// Refresh the window
glutSwapBuffers();

} 

// Handles the reshape
void reshape(int width, int height)
{
// Specify the width and height
glViewport(0, 0, width, height);
projMatrix = perspective(fieldOfView, (float)width / (float)height, nearPlane, farPlane);

viewMatrix = lookAt(eyePosition, lookAtCenter, upVector);
}

// Read mouse motion
void passiveMotion(int x, int y) {

	rotateY = (float)x * -0.5f;
	rotateX = (float)y * 0.5f;

	//Force to refresh the window.
	glutPostRedisplay();
}
void init() {
prepareVBOs();
prepareShaders();
getShaderVariableLocations(program);
setLightingParam();
prepareTextureImage();
// Background color
glClearColor(1, 1, 1, 1);
glEnable(GL_DEPTH_TEST);
}

int main(int argc, char *argv[])
{
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_RGBA |GLUT_DOUBLE | GLUT_DEPTH);
glutCreateWindow("3D chair - Dimitri Atalla");
glutReshapeWindow(800, 800);
glewInit();

init();

// Display callback function
glutDisplayFunc(display);

// Reshape callback function
glutReshapeFunc(reshape);

// Passive mouse motion function
glutPassiveMotionFunc(passiveMotion);

// Start the loop
glutMainLoop();
return 0;
}
